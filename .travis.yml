language: cpp

dist: trusty
sudo: required

matrix:
  include:
    - os: linux
      compiler: clang
      env: LINUX_BUILD=yes DISTRO=ubuntu DISTRO_VERSION=16.04
    - os: linux
      compiler: clang
      env: LINUX_BUILD=yes DISTRO=ubuntu DISTRO_VERSION=17.04 \
           CMAKE_FLAGS="-DCMAKE_BUILD_TYPE=Debug"
    - os: linux
      compiler: clang
      env: LINUX_BUILD=yes DISTRO=fedora DISTRO_VERSION=24 \
           CMAKE_FLAGS="-DCMAKE_BUILD_TYPE=Debug"
    - os: linux
      compiler: clang
      env: LINUX_BUILD=yes DISTRO=fedora DISTRO_VERSION=25
    - os: linux
      compiler: gcc
      env: LINUX_BUILD=yes DISTRO=ubuntu DISTRO_VERSION=16.04 \
           CMAKE_FLAGS="-DCOVERAGE:BOOL=true -DCMAKE_BUILD_TYPE=Debug" BUILD_EXTRA=COVERAGE
    - os: linux
      compiler: gcc
      env: LINUX_BUILD=yes DISTRO=ubuntu DISTRO_VERSION=17.04
    - os: linux
      compiler: gcc
      env: LINUX_BUILD=yes DISTRO=fedora DISTRO_VERSION=24
    - os: linux
      compiler: gcc
      env: LINUX_BUILD=yes DISTRO=fedora DISTRO_VERSION=25

script:
  - ci/build-linux.sh

after_success:
  - ci/upload-coverage.sh

# Cache the (saved) docker images.
# With recent version of docker one can reuse a prior image as a
# source cache, that can speed up the builds, as the dependencies and
# images can be reused ...
# TODO() - we need to add a cron job to rebuild without a cache every
# so often, the dependencies do change and we want to validate that
# the examples build with the newer versions.  That is easy to do with
# a cron-based build in Travis that cleans up the cache every X days.
cache:
  directories:
    - docker-images/ubuntu/16.04
    - docker-images/ubuntu/17.04
    - docker-images/fedora/24
    - docker-images/fedora/25

install:
  - ci/install-linux.sh

before_cache:
  - ci/cache-linux.sh

notifications:
  email: false
