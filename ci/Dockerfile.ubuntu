# Builds gee-h inside a docker container.
#
#   Copyright 2017 Carlos O'Ryan
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

# This Dockerfile requires docker 17.06 or higher, it uses an argument to set
# the base image version, which was not supported in early versions of docker.
ARG DISTRO_VERSION=16.04
FROM ubuntu:$DISTRO_VERSION
MAINTAINER "Carlos O'Ryan <coryan@google.com>"

# Install the pre-requisites, the long command line is to create as few
# layers as possible in the image ...
RUN apt-get update && \
  apt-get install --no-install-recommends --no-install-suggests -y \
    autoconf \
    autoconf-archive \
    automake \
    build-essential \
    ca-certificates \
    clang \
    cmake \
    curl \
    g++ \
    gcc \
    gcovr \
    git-core \
    lcov \
    libtool \
    lsb-release \
    make \
    pkg-config \
    python \
    shtool \
    wget && \
  apt-get clean

# ... compile and install gRPC++ and Protobuf v3 ...
WORKDIR /var/tmp/build-grpc
RUN (git clone --depth 10 https://github.com/grpc/grpc.git && \
    cd grpc && git pull && git submodule update --init && \
    make -j 2 && make install && \
    cd third_party/protobuf && make install)

# ... install etcd and etcdctl in /usr/bin, they are used in the integration tests ...
WORKDIR /var/tmp/install-etcd
RUN wget -q https://github.com/coreos/etcd/releases/download/v3.2.1/etcd-v3.2.1-linux-amd64.tar.gz && \
  tar -xf etcd-v3.2.1-linux-amd64.tar.gz && \
  cp etcd-v3.2.1-linux-amd64/etcd /usr/bin && \
  cp etcd-v3.2.1-linux-amd64/etcdctl /usr/bin && \
  /bin/rm -fr /var/tmp/install-etcd

# ... capture the arguments that control the build ...
ARG CXX=clang++
ARG CC=clang
ARG CMAKE_FLAGS=""
ARG BUILD_EXTRA=""

# ... capture the Travis job number, effectively this busts the cache
# in each build, which we want anyway ...
ARG TRAVIS_JOB_NUMBER=
RUN echo Running build=${TRAVIS_JOB_NUMBER}

# ... copy the contents of the source code directory to the container ...
WORKDIR /var/tmp/build-gee-h
COPY gh /var/tmp/build-gee-h/gh
COPY CMakeLists.txt /var/tmp/build-gee-h
COPY ext /var/tmp/build-gee-h/ext
COPY cmake /var/tmp/build-gee-h/cmake
COPY examples /var/tmp/build-gee-h/examples

# ... build inside a sub-directory, easier to copy the artifacts that way
WORKDIR /var/tmp/build-gee-h/build
# ... run the configure / compile / test cycle ...
RUN cmake ${CMAKE_FLAGS} .. && make -j 2
RUN make -j 2 test || cat Testing/Temporary/LastTest.log

